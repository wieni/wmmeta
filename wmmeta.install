<?php

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\image\Entity\ImageStyle;

function wmmeta_uninstall(): void
{
    $entityTypeManager = \Drupal::entityTypeManager();
    $entityFieldManager = \Drupal::getContainer()->get('entity_field.manager');

    $fieldConfigStorage = $entityTypeManager->getStorage('field_config');
    $fieldStorageConfigStorage = $entityTypeManager->getStorage('field_storage_config');
    $metaStorage = $entityTypeManager->getStorage('meta');
    $eckStorage = $entityTypeManager->getStorage('eck_entity_type');

    /** @var EntityTypeInterface[] $entityTypes */
    $entityTypes = array_filter(
        $entityTypeManager->getDefinitions(),
        function (EntityTypeInterface $entityType) use ($entityFieldManager) {
            return $entityType->entityClassImplements(FieldableEntityInterface::class)
                && $entityType->hasKey('published')
                && isset($entityFieldManager->getFieldStorageDefinitions($entityType->id())['field_meta']);
        }
    );

    foreach ($entityTypes as $entityType) {
        // Delete fields
        $ids = $fieldConfigStorage->getQuery()
            ->condition('field_name', 'field_meta')
            ->condition('entity_type', $entityType->id())
            ->execute();

        if (empty($ids)) {
            continue;
        }

        $fieldConfigs = $fieldConfigStorage->loadMultiple($ids);
        $fieldConfigStorage->delete($fieldConfigs);
    }

    // Delete bundle
    $ids = $metaStorage->getQuery()
        ->condition('type', 'meta')
        ->execute();

    if (!empty($ids)) {
        $metas = $metaStorage->loadMultiple($ids);
        $metaStorage->delete($metas);
    }

    // Delete entity type
    $eckStorage
        ->load('meta')
        ->delete();

    // Clear cached definitions
    $entityTypeManager->clearCachedDefinitions();
}

/**
 * Install the OG image style
 */
function wmmeta_update_8001(): void
{
    // Install the new image module dependency if not yet installed
    \Drupal::getContainer()
        ->get('module_installer')
        ->install(['image']);

    $storage = new FileStorage(__DIR__ . '/config/install');
    $data = $storage->read('image.style.og');

    if (!ImageStyle::load('og')) {
        ImageStyle::create($data)->save();
    }
}

/**
 * Update the meta view & form display
 */
function wmmeta_update_8002(): void
{
    $formDisplay = EntityFormDisplay::load('media.image.default');
    if ($formDisplay instanceof EntityFormDisplay && $component = $formDisplay->getComponent('field_meta_image')) {
        $component['settings']['image_style'] = 'og';

        $formDisplay->setComponent('field_meta_image', $component);
        $formDisplay->save();
    }

    $viewDisplay = EntityViewDisplay::load('meta.meta.default');
    if ($viewDisplay instanceof EntityViewDisplay && $component = $viewDisplay->getComponent('field_meta_image')) {
        $component['type'] = 'wmmedia_media_image_default';
        $component['settings'] = [
            'image_style' => 'og',
        ];

        $viewDisplay->setComponent('field_meta_image', $component);
        $viewDisplay->save();
    }
}
