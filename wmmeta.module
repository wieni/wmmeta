<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\wmmeta\Event\MetaFormAlterEvent;
use Drupal\wmmeta\WmmetaEvents;

function wmmeta_cron(): void
{
    \Drupal::getContainer()->get('wmmeta.scheduler')->runSchedule();
}

function wmmeta_theme()
{
    return [
        'meta_head_tags' => [
            'variables' => [
                'meta' => \Drupal::getContainer()->get('wmmeta.meta')->getDefaultMetaData(),
            ],
            'path' => \Drupal::getContainer()->get('extension.path.resolver')->getPath('module', 'wmmeta') . DIRECTORY_SEPARATOR . 'templates',
            'template' => 'head_tags',
        ],
    ];
}

function wmmeta_preprocess_html(&$variables): void
{
    \Drupal::getContainer()
        ->get('wmmeta.schema_org.manager')
        ->onPreprocessHtml($variables);

    $variables['metaHeadTags'] = [
        '#theme' => 'meta_head_tags',
        '#meta' => \Drupal::getContainer()->get('wmmeta.meta')->getMetaData(),
    ];
}

function wmmeta_inline_entity_form_entity_form_alter(&$entityForm, FormStateInterface $formState): void
{
    if ($entityForm['#entity_type'] !== 'meta') {
        return;
    }

    Drupal::getContainer()->get('event_dispatcher')
        ->dispatch(WmmetaEvents::META_FORM_ALTER, new MetaFormAlterEvent($entityForm, $formState));
}

function wmmeta_entity_model_mapping()
{
    return \Drupal::service('wmmodel.service.finder')
        ->findModels('wmmeta');
}

function wmmeta_entity_presave(EntityInterface $entity): void
{
    \Drupal::service('wmmeta.scheduler.subscriber')
        ->setEntityStatus($entity);
}

/**
 * Implements @see hook_entity_type_alter().
 */
function wmmeta_entity_type_alter(array &$entityTypes): void
{
    if (isset($entityTypes['meta'])) {
        $entityTypes['meta']->addConstraint('timeframe_constraint');
    }
}